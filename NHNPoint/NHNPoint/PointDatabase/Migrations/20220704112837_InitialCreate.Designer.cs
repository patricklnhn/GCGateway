// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PointDatabase;

#nullable disable

namespace PointDatabase.Migrations
{
    [DbContext(typeof(Entities))]
    [Migration("20220704112837_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("PointDatabase.Adresse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Adressenavn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Adressetilleggsnavn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BNR")
                        .HasColumnType("int");

                    b.Property<string>("Bruker")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Bruksenhetsnummer")
                        .HasColumnType("int");

                    b.Property<int>("GNR")
                        .HasColumnType("int");

                    b.Property<int>("Nummer")
                        .HasColumnType("int");

                    b.Property<int>("PoststedId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TS")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Undernummer")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PoststedId");

                    b.ToTable("Adresse");
                });

            modelBuilder.Entity("PointDatabase.Bygning", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AdresseId")
                        .HasColumnType("int");

                    b.Property<string>("Bruker")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EPSG")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<int>("LokasjonId")
                        .HasColumnType("int");

                    b.Property<double>("Longtitude")
                        .HasColumnType("float");

                    b.Property<DateTime>("TS")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdresseId");

                    b.HasIndex("LokasjonId");

                    b.ToTable("Bygning");
                });

            modelBuilder.Entity("PointDatabase.Fartøy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Bruker")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FartøyTypeId")
                        .HasColumnType("int");

                    b.Property<int>("LokasjonId")
                        .HasColumnType("int");

                    b.Property<string>("Navn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Registreringsnummer")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("TS")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FartøyTypeId");

                    b.HasIndex("LokasjonId");

                    b.HasIndex("Registreringsnummer")
                        .IsUnique();

                    b.ToTable("Fartøy");
                });

            modelBuilder.Entity("PointDatabase.FartøyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Aktiv")
                        .HasColumnType("bit");

                    b.Property<string>("Bruker")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Navn")
                        .HasColumnType("int");

                    b.Property<DateTime>("TS")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("FartøyType");
                });

            modelBuilder.Entity("PointDatabase.Fylke", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Aktiv")
                        .HasColumnType("bit");

                    b.Property<string>("Bruker")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fylkesnavn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Fylkesnummer")
                        .HasColumnType("int");

                    b.Property<int>("HelseRegionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TS")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HelseRegionId");

                    b.ToTable("Fylke");
                });

            modelBuilder.Entity("PointDatabase.HelseRegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Aktiv")
                        .HasColumnType("bit");

                    b.Property<string>("Bruker")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Navn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TS")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("HelseRegion");
                });

            modelBuilder.Entity("PointDatabase.Kommune", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Aktiv")
                        .HasColumnType("bit");

                    b.Property<string>("Bruker")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FylkeId")
                        .HasColumnType("int");

                    b.Property<string>("Kommunenavn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kommunenummer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TS")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FylkeId");

                    b.ToTable("Kommune");
                });

            modelBuilder.Entity("PointDatabase.Lokasjon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Aktiv")
                        .HasColumnType("bit");

                    b.Property<string>("Bruker")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Navn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Orgnummer")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("TS")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Orgnummer")
                        .IsUnique();

                    b.ToTable("Lokasjon");
                });

            modelBuilder.Entity("PointDatabase.Poststed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Aktiv")
                        .HasColumnType("bit");

                    b.Property<string>("Bruker")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KommuneId")
                        .HasColumnType("int");

                    b.Property<string>("Navn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nummer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TS")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("KommuneId");

                    b.ToTable("Poststed");
                });

            modelBuilder.Entity("PointDatabase.Punkt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Bruker")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BygningId")
                        .HasColumnType("int");

                    b.Property<int?>("FartøyId")
                        .HasColumnType("int");

                    b.Property<int?>("RomId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TS")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BygningId");

                    b.HasIndex("FartøyId");

                    b.HasIndex("RomId");

                    b.ToTable("Punkt");
                });

            modelBuilder.Entity("PointDatabase.Rom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Bruker")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BygningId")
                        .HasColumnType("int");

                    b.Property<int>("Etasje")
                        .HasColumnType("int");

                    b.Property<int>("KontaktPersonID")
                        .HasColumnType("int");

                    b.Property<string>("Romnummer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TS")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BygningId");

                    b.ToTable("Rom");
                });

            modelBuilder.Entity("PointDatabase.Adresse", b =>
                {
                    b.HasOne("PointDatabase.Poststed", "Poststed")
                        .WithMany()
                        .HasForeignKey("PoststedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Poststed");
                });

            modelBuilder.Entity("PointDatabase.Bygning", b =>
                {
                    b.HasOne("PointDatabase.Adresse", "Adresse")
                        .WithMany()
                        .HasForeignKey("AdresseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PointDatabase.Lokasjon", "Lokasjon")
                        .WithMany()
                        .HasForeignKey("LokasjonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adresse");

                    b.Navigation("Lokasjon");
                });

            modelBuilder.Entity("PointDatabase.Fartøy", b =>
                {
                    b.HasOne("PointDatabase.FartøyType", "FartøyType")
                        .WithMany()
                        .HasForeignKey("FartøyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PointDatabase.Lokasjon", "Lokasjon")
                        .WithMany()
                        .HasForeignKey("LokasjonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FartøyType");

                    b.Navigation("Lokasjon");
                });

            modelBuilder.Entity("PointDatabase.Fylke", b =>
                {
                    b.HasOne("PointDatabase.HelseRegion", "HelseRegion")
                        .WithMany()
                        .HasForeignKey("HelseRegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HelseRegion");
                });

            modelBuilder.Entity("PointDatabase.Kommune", b =>
                {
                    b.HasOne("PointDatabase.Fylke", "Fylke")
                        .WithMany()
                        .HasForeignKey("FylkeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fylke");
                });

            modelBuilder.Entity("PointDatabase.Poststed", b =>
                {
                    b.HasOne("PointDatabase.Kommune", "Kommune")
                        .WithMany()
                        .HasForeignKey("KommuneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kommune");
                });

            modelBuilder.Entity("PointDatabase.Punkt", b =>
                {
                    b.HasOne("PointDatabase.Bygning", "Bygning")
                        .WithMany()
                        .HasForeignKey("BygningId");

                    b.HasOne("PointDatabase.Fartøy", "Fartøy")
                        .WithMany()
                        .HasForeignKey("FartøyId");

                    b.HasOne("PointDatabase.Rom", "Rom")
                        .WithMany()
                        .HasForeignKey("RomId");

                    b.Navigation("Bygning");

                    b.Navigation("Fartøy");

                    b.Navigation("Rom");
                });

            modelBuilder.Entity("PointDatabase.Rom", b =>
                {
                    b.HasOne("PointDatabase.Bygning", "Bygning")
                        .WithMany()
                        .HasForeignKey("BygningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bygning");
                });
#pragma warning restore 612, 618
        }
    }
}
